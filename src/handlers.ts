import { InlineKeyboard } from 'grammy'

import { reply, Berserk } from '@/bot-tools'
import { searchRules, getRuleByCode } from '@/rules'
import { splitArray, MAX_PATTERN_LENGTH } from '@/helpers'

export const setHandlers = (bot: Berserk) => {
  bot.chatType('private').command('start', ctx => {
    ctx.reply('Okay').then()
  })

  bot.on('message').command(['r', 'rule', 'rules'], ctx => {
    const replyToMessage =
      ctx.chat.type === 'group' ? ctx.msg.message_id : undefined

    if (ctx.match.length < 3) {
      reply(ctx, '–•–æ—Ç—è –±—ã —Ç—Ä–∏ –±—É–∫–≤—ã...', replyToMessage)

      return
    }

    const foundRules = searchRules(ctx.match)

    if (!foundRules.length) {
      reply(
        ctx,
        '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –ø—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª',
        replyToMessage
      )

      return
    }

    if (foundRules.length > MAX_PATTERN_LENGTH) {
      reply(ctx, '–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —ç—Ç–æ —Å–ª–∏—à–∫–æ–º –æ–±—â–∞—è —Ñ—Ä–∞–∑–∞', replyToMessage)

      return
    }

    if (foundRules.length === 1) {
      const [{ title, code, text, picture }] = foundRules
      const caption = `<i>${title}</i>\n\n<b>${code}.</b> ${text}`

      reply(ctx, caption, replyToMessage, { picture })

      return
    }

    const buttons = foundRules.map(({ code }) => ({
      text: code,
      callback_data: `${code}/${ctx.from.id}/${ctx.msg.message_id}`,
    }))

    const keyboard = new InlineKeyboard(splitArray(buttons))

    reply(ctx, '–≠—Ç–∞ —Ñ—Ä–∞–∑–∞ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—É–Ω–∫—Ç–∞—Ö', replyToMessage, {
      keyboard,
    })
  })

  bot.on('callback_query:data', ctx => {
    const [code, userIdStr, messageIdStr] = ctx.callbackQuery.data.split('/')
    const userId = parseInt(userIdStr)
    const messageId = parseInt(messageIdStr)

    if (ctx.from.id != userId) {
      ctx.answerCallbackQuery({ text: '–ù–µ —Ç–≤–æ—ë üòè' }).then()

      return
    }

    ctx.deleteMessage().then()
    ctx.answerCallbackQuery().then()

    const rule = getRuleByCode(code)

    if (!rule) {
      return
    }

    const { title, text, picture } = rule
    const caption = `<i>${title}</i>\n\n<b>${code}.</b> ${text}`

    reply(ctx, caption, messageId, { picture })
  })
}
